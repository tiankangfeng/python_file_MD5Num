# -*- encoding:utf-8 -*-

from hashlib import md5
import os
from tkinter import *
from tkinter.filedialog import *
from base64 import b64decode
from PIL import ImageTk

tmp = open("tmp.ico", "wb+")
tmp.write(b64decode(''))
# tmp.write(base64.b64decode('粘贴icon2.py字符串内容'))
tmp.close()


def selectPath():
    path_ = askopenfilenames()
    # return path_
    # path.set(','.join(path_))
    string = ""
    for i in path_:
        print(i)
        print(generate_file_md5value(i))
        # string += i+'\t'+i.split('/')[-1]+'\t'+generate_file_md5value(i)+'\n'
        string += i.split('/')[-1]+'\t'+generate_file_md5value(i)+'\n'
    return string


def insert_point():
    data = selectPath()
    text.delete('1.0', 'end')
    text.insert('insert', data)


def generate_file_md5value(fpath):
    '''以文件路径作为参数，返回对文件md5后的值'''
    m = md5()
    # 需要使用二进制格式读取文件内容
    a_file = open(fpath, 'rb')
    m.update(a_file.read())
    a_file.close()
    return m.hexdigest()


if __name__ == '__main__':
    # fpath = "E:\视频\LStrdRh0.mp4"
    root = Tk()
    root.title('获取文件MD5码')
    root.iconbitmap("tmp.ico")
    root.geometry('720x650')
    os.remove("tmp.ico")
    path = StringVar()
    # Label(root, text="目标路径:").pack()
    # Entry(root, textvariable=path).pack()
    text = Text(root, width=100, heigh=45)
    # text.insert(INSERT, "Name..........")
    # text.insert(END, "Salary.....")
    text.pack()
    But1 = Button(root, text="路径选择", command=insert_point)
    But1.pack()

    root.mainloop()

